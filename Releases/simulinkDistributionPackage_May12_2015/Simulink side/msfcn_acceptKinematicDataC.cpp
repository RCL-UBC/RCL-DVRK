/*
 * File: msfcn_acceptKinematicDataC.c
 *
 *
  *
  *   --- THIS FILE GENERATED BY S-FUNCTION BUILDER: 3.0 ---
  *
  *   This file is an S-function produced by the S-Function
  *   Builder which only recognizes certain fields.  Changes made
  *   outside these fields will be lost the next time the block is
  *   used to load, edit, and resave this file. This file will be overwritten
  *   by the S-function Builder block. If you want to edit this file by hand, 
  *   you must change it only in the area defined as:  
  *
  *        %%%-SFUNWIZ_defines_Changes_BEGIN
  *        #define NAME 'replacement text' 
  *        %%% SFUNWIZ_defines_Changes_END
  *
  *   DO NOT change NAME--Change the 'replacement text' only.
  *
  *   For better compatibility with the Simulink Coder, the
  *   "wrapper" S-function technique is used.  This is discussed
  *   in the Simulink Coder's Manual in the Chapter titled,
  *   "Wrapper S-functions".
  *
  *  -------------------------------------------------------------------------
  * | See matlabroot/simulink/src/sfuntmpl_doc.c for a more detailed template |
  *  ------------------------------------------------------------------------- 
 * Created: Thu Dec 18 17:29:56 2014
 * 
 *
 */

#define S_FUNCTION_LEVEL 2
#define S_FUNCTION_NAME msfcn_acceptKinematicDataC
/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
/* %%%-SFUNWIZ_defines_Changes_BEGIN --- EDIT HERE TO _END */
#define NPARAMS              2
/* Parameter  1 */
#define PARAMETER_0_NAME      param_hostIP
#define PARAMETER_0_DTYPE     real_T
#define PARAMETER_0_COMPLEX   COMPLEX_NO
/* Parameter  2 */
#define PARAMETER_1_NAME      param_port
#define PARAMETER_1_DTYPE     real_T
#define PARAMETER_1_COMPLEX   COMPLEX_NO


#define NUM_INPUTS           1
/* Input Port  0 */
#define IN_PORT_0_NAME      controllerType
#define INPUT_0_WIDTH       1
#define INPUT_DIMS_0_COL    1
#define INPUT_0_DTYPE       real_T
#define INPUT_0_COMPLEX     COMPLEX_NO
#define IN_0_FRAME_BASED    FRAME_NO
#define IN_0_BUS_BASED      0
#define IN_0_BUS_NAME       
#define IN_0_DIMS           1-D
#define INPUT_0_FEEDTHROUGH 1
#define IN_0_ISSIGNED        0
#define IN_0_WORDLENGTH      8
#define IN_0_FIXPOINTSCALING 1
#define IN_0_FRACTIONLENGTH  9
#define IN_0_BIAS            0
#define IN_0_SLOPE           0.125


#define NUM_OUTPUTS          5
/* Output Port  0 */
#define OUT_PORT_0_NAME      dt
#define OUTPUT_0_WIDTH       1
#define OUTPUT_DIMS_0_COL    1
#define OUTPUT_0_DTYPE       real_T
#define OUTPUT_0_COMPLEX     COMPLEX_NO
#define OUT_0_FRAME_BASED    FRAME_NO
#define OUT_0_BUS_BASED      0
#define OUT_0_BUS_NAME       
#define OUT_0_DIMS           1-D
#define OUT_0_ISSIGNED        1
#define OUT_0_WORDLENGTH      8
#define OUT_0_FIXPOINTSCALING 1
#define OUT_0_FRACTIONLENGTH  3
#define OUT_0_BIAS            0
#define OUT_0_SLOPE           0.125
/* Output Port  1 */
#define OUT_PORT_1_NAME      curPos
#define OUTPUT_1_WIDTH       12
#define OUTPUT_DIMS_1_COL    1
#define OUTPUT_1_DTYPE       real_T
#define OUTPUT_1_COMPLEX     COMPLEX_NO
#define OUT_1_FRAME_BASED    FRAME_NO
#define OUT_1_BUS_BASED      0
#define OUT_1_BUS_NAME       
#define OUT_1_DIMS           1-D
#define OUT_1_ISSIGNED        1
#define OUT_1_WORDLENGTH      8
#define OUT_1_FIXPOINTSCALING 1
#define OUT_1_FRACTIONLENGTH  3
#define OUT_1_BIAS            0
#define OUT_1_SLOPE           0.125
/* Output Port  2 */
#define OUT_PORT_2_NAME      desPos
#define OUTPUT_2_WIDTH       12
#define OUTPUT_DIMS_2_COL    1
#define OUTPUT_2_DTYPE       real_T
#define OUTPUT_2_COMPLEX     COMPLEX_NO
#define OUT_2_FRAME_BASED    FRAME_NO
#define OUT_2_BUS_BASED      0
#define OUT_2_BUS_NAME       
#define OUT_2_DIMS           1-D
#define OUT_2_ISSIGNED        1
#define OUT_2_WORDLENGTH      8
#define OUT_2_FIXPOINTSCALING 1
#define OUT_2_FRACTIONLENGTH  3
#define OUT_2_BIAS            0
#define OUT_2_SLOPE           0.125
/* Output Port  3 */
#define OUT_PORT_3_NAME      curVel
#define OUTPUT_3_WIDTH       7
#define OUTPUT_DIMS_3_COL    1
#define OUTPUT_3_DTYPE       real_T
#define OUTPUT_3_COMPLEX     COMPLEX_NO
#define OUT_3_FRAME_BASED    FRAME_NO
#define OUT_3_BUS_BASED      0
#define OUT_3_BUS_NAME       
#define OUT_3_DIMS           1-D
#define OUT_3_ISSIGNED        1
#define OUT_3_WORDLENGTH      8
#define OUT_3_FIXPOINTSCALING 1
#define OUT_3_FRACTIONLENGTH  3
#define OUT_3_BIAS            0
#define OUT_3_SLOPE           0.125
/* Output Port  4 */
#define OUT_PORT_4_NAME      timeStamp
#define OUTPUT_4_WIDTH       1
#define OUTPUT_DIMS_4_COL    1
#define OUTPUT_4_DTYPE       real_T
#define OUTPUT_4_COMPLEX     COMPLEX_NO
#define OUT_4_FRAME_BASED    FRAME_NO
#define OUT_4_BUS_BASED      0
#define OUT_4_BUS_NAME       
#define OUT_4_DIMS           1-D
#define OUT_4_ISSIGNED        1
#define OUT_4_WORDLENGTH      8
#define OUT_4_FIXPOINTSCALING 1
#define OUT_4_FRACTIONLENGTH  3
#define OUT_4_BIAS            0
#define OUT_4_SLOPE           0.125

#define SAMPLE_TIME_0        0.001
#define NUM_DISC_STATES      0
#define DISC_STATES_IC       [0]
#define NUM_CONT_STATES      0
#define CONT_STATES_IC       [0]

#define SFUNWIZ_GENERATE_TLC 1
#define SOURCEFILES "__SFB__"
#define PANELINDEX           6
#define USE_SIMSTRUCT        0
#define SHOW_COMPILE_STEPS   1                   
#define CREATE_DEBUG_MEXFILE 1
#define SAVE_CODE_ONLY       0
#define SFUNWIZ_REVISION     3.0
/* %%%-SFUNWIZ_defines_Changes_END --- EDIT HERE TO _BEGIN */
/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
#include "simstruc.h"
#include "mex.h"

#include <stdio.h>
#include <stdlib.h> 
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <netdb.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <arpa/inet.h>

#define PARAM_DEF0(S) ssGetSFcnParam(S, 0)
#define PARAM_DEF1(S) ssGetSFcnParam(S, 1)

#define SOCKFD        0
#define CONTROLSCHEME 1
#define COUNTER       2
  
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

/*====================*
 * S-function methods *
 *====================*/

#define MDL_CHECK_PARAMETERS
#if defined(MDL_CHECK_PARAMETERS) && defined(MATLAB_MEX_FILE)
/* Function: mdlCheckParameters =============================================
* Abstract:
*    Validate our parameters to verify they are okay.
*/
static void mdlCheckParameters(SimStruct *S)
{
    int paramIndex  = 0;
    bool invalidParam = false;
    /* All parameters must match the S-function Builder Dialog */

    const mxArray *pVal0 = ssGetSFcnParam(S,0);   
    const mxArray *pVal1 = ssGetSFcnParam(S,1);
    
    if (!mxIsChar(pVal0)) {
        invalidParam = true;
        paramIndex = 0;
        goto EXIT_POINT;
    }

    if (!mxIsChar(pVal1)) {
        invalidParam = true;
        paramIndex = 1;
        goto EXIT_POINT;
    }

    EXIT_POINT:
    if (invalidParam) {
        char parameterErrorMsg[1024];
        sprintf(parameterErrorMsg, "The data type of parameter %d is not valid. "
              "Please input char array parameters (\'host\', \'port number\')" , paramIndex + 1);
        ssSetErrorStatus(S,parameterErrorMsg);
    }
    return;
}
#endif


/* Function: mdlInitializeSizes ===============================================
 * Abstract:
 *   Setup sizes of the various vectors.
 */
static void mdlInitializeSizes(SimStruct *S)
{
    DECL_AND_INIT_DIMSINFO(outputDimsInfo);
    ssSetNumSFcnParams(S, NPARAMS);
    
    #if defined(MATLAB_MEX_FILE)
	if (ssGetNumSFcnParams(S) == ssGetSFcnParamsCount(S)) {
        mdlCheckParameters(S);
        if (ssGetErrorStatus(S) != NULL) {
            return;
        }
    } else {
        return; /* Parameter mismatch will be reported by Simulink */
    }
    #endif
     
    ssSetNumContStates(S, NUM_CONT_STATES);
    ssSetNumDiscStates(S, NUM_DISC_STATES);

    if (!ssSetNumInputPorts(S, NUM_INPUTS)) return;
    /* Input Port 0 */
    ssSetInputPortWidth(S, 0, INPUT_0_WIDTH);
    ssSetInputPortDataType(S, 0, SS_DOUBLE);
    ssSetInputPortComplexSignal(S, 0, INPUT_0_COMPLEX);
    ssSetInputPortDirectFeedThrough(S, 0, INPUT_0_FEEDTHROUGH);
    ssSetInputPortRequiredContiguous(S, 0, 1); /*direct input signal access*/

    if (!ssSetNumOutputPorts(S, NUM_OUTPUTS)) return;
    /* Output Port 0 */
    ssSetOutputPortWidth(S, 0, OUTPUT_0_WIDTH);
    ssSetOutputPortDataType(S, 0, SS_DOUBLE);
    ssSetOutputPortComplexSignal(S, 0, OUTPUT_0_COMPLEX);
    /* Output Port 1 */
    ssSetOutputPortWidth(S, 1, OUTPUT_1_WIDTH);
    ssSetOutputPortDataType(S, 1, SS_DOUBLE);
    ssSetOutputPortComplexSignal(S, 1, OUTPUT_1_COMPLEX);
    /* Output Port 2 */
    ssSetOutputPortWidth(S, 2, OUTPUT_2_WIDTH);
    ssSetOutputPortDataType(S, 2, SS_DOUBLE);
    ssSetOutputPortComplexSignal(S, 2, OUTPUT_2_COMPLEX);
    /* Output Port 3 */
    ssSetOutputPortWidth(S, 3, OUTPUT_3_WIDTH);
    ssSetOutputPortDataType(S, 3, SS_DOUBLE);
    ssSetOutputPortComplexSignal(S, 3, OUTPUT_3_COMPLEX);
    /* Output Port 4 */
    ssSetOutputPortWidth(S, 4, OUTPUT_4_WIDTH);
    ssSetOutputPortDataType(S, 4, SS_DOUBLE);
    ssSetOutputPortComplexSignal(S, 4, OUTPUT_4_COMPLEX);

    ssSetNumSampleTimes(S, 1);
    ssSetNumRWork(S, 0);
    ssSetNumIWork(S, 3); //using the integer work vector instead of global variables!!!!! Holds sockfd, controller scheme and counter
    ssSetNumPWork(S, 0);
    ssSetNumModes(S, 0);
    ssSetNumNonsampledZCs(S, 0);

    /* Take care when specifying exception free code - see sfuntmpl_doc.c */
    ssSetOptions(S, (SS_OPTION_EXCEPTION_FREE_CODE |
                     SS_OPTION_USE_TLC_WITH_ACCELERATOR | 
		     SS_OPTION_WORKS_WITH_CODE_REUSE));    
    
    mexPrintf("acceptKinematicData - Initialized!\n");
}

/* Function: mdlInitializeSampleTimes =========================================
 * Abstract:
 *    Specifiy  the sample time.
 */
static void mdlInitializeSampleTimes(SimStruct *S)
{
    ssSetSampleTime(S, 0, SAMPLE_TIME_0);
    ssSetOffsetTime(S, 0, 0.0);
}

#define MDL_START  /* Change to #undef to remove function */
#if defined(MDL_START) 
  /* Function: mdlStart =======================================================
   * Abstract:
   *    This function is called once at start of model execution. If you
   *    have states that should be initialized once, this is the place
   *    to do it.
   */
static void mdlStart(SimStruct *S)
{
    /* Set up socket client (daVinci C++ streams) */
    struct addrinfo hints, *servinfo, *p;
    int rv, sockfd;
    char s[INET6_ADDRSTRLEN];
    
    memset(&hints, 0, sizeof hints);
    hints.ai_family   = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;
    
    const int LENGTH = 50; 
    char_T tcpip_hostIP[2];
    char_T tcpip_portNum[LENGTH];
    
    mxGetString(ssGetSFcnParam(S, 0), tcpip_hostIP, LENGTH);
    mxGetString(ssGetSFcnParam(S, 1), tcpip_portNum, LENGTH);
        
    if ((rv = getaddrinfo(tcpip_hostIP, tcpip_portNum, &hints, &servinfo)) != 0) 
    {
        mexPrintf("getaddrinfo: %s\n", gai_strerror(rv));
        return;
    }
    
    /* loop through all the results and connect to the first we can */
    for(p = servinfo; p != NULL; p = p->ai_next) 
    {
        if ((sockfd = socket(p->ai_family, p->ai_socktype, p->ai_protocol)) == -1) 
        {
            mexPrintf("Kinematic client: socket\n");
            continue;
        }
        if (connect(sockfd, p->ai_addr, p->ai_addrlen) == -1) 
        {
            close(sockfd);
            mexPrintf("Kinematic client: connect on %s port %s (sockfd = %i)\n", tcpip_hostIP, tcpip_portNum, sockfd);
            continue;
        }
        break;
    }
    
    if (p == NULL) 
    {
        mexPrintf("Kinematic client: failed to connect\n");
        return;
    }
       
    inet_ntop(p->ai_family, get_in_addr((struct sockaddr *)p->ai_addr), s, sizeof s);
    mexPrintf("Kinematic client: connecting to %s on port %s (sockfd = %i)\n", s, tcpip_portNum, sockfd);
    freeaddrinfo(servinfo); // all done with this structure  
    
    //Initialize work vector 
    int *internalVars = ssGetIWork(S); /* integer typed*/
    internalVars[SOCKFD]        = sockfd;
    internalVars[CONTROLSCHEME] = -1;
}
#endif /*  MDL_START */
    
#define MDL_SET_OUTPUT_PORT_DATA_TYPE
static void mdlSetOutputPortDataType(SimStruct *S, int port, DTypeId dType)
{
    ssSetOutputPortDataType(S, 0, dType);
}

#define MDL_SET_DEFAULT_PORT_DATA_TYPES
static void mdlSetDefaultPortDataTypes(SimStruct *S)
{
   ssSetOutputPortDataType(S, 0, SS_DOUBLE);
}
/* Function: mdlOutputs =======================================================
 *
*/
static void mdlOutputs(SimStruct *S, int_T tid)
{
    //get sockFd and controllerScheme
    int_T *internalVars = ssGetIWork(S); /* integer typed*/    
    int controlScheme = internalVars[CONTROLSCHEME];
    int sockfd        = internalVars[SOCKFD];
    int counter       = internalVars[COUNTER];
    
    if(sockfd == 0) //failed to initialize
        return;
    
    if(controlScheme == -1) { //first run
        const real_T   *controllerType  = (const real_T*) ssGetInputPortSignal(S,0);
        internalVars[CONTROLSCHEME]     = (int)controllerType[0]; //update work vector
        controlScheme                   = internalVars[CONTROLSCHEME]; //reset this value
    }
    
    real_T        *dt  = (real_T *)ssGetOutputPortRealSignal(S,0);
    real_T        *curPos  = (real_T *)ssGetOutputPortRealSignal(S,1);
    real_T        *desPos  = (real_T *)ssGetOutputPortRealSignal(S,2);
    real_T        *curVel  = (real_T *)ssGetOutputPortRealSignal(S,3);
    real_T        *timeStamp  = (real_T *)ssGetOutputPortRealSignal(S,4);

    int numbytes, MAXDATASIZE;
    if(controlScheme == 0) //joint level controller
        MAXDATASIZE = 326;
    else if(controlScheme == 1) //cartesian controller
        MAXDATASIZE = 452;
    
    char buf[MAXDATASIZE];
    
    if ((numbytes = recv(sockfd, buf, MAXDATASIZE-1, 0)) == -1) 
    {
        //mexPrintf("recv Failed\n");
    }     
    else 
    {    
        buf[numbytes-1] = '\0'; //don't want terminator        
        if(controlScheme == 0) { //joint level controller
            double a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w;
            int ret = sscanf(buf, "%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf",
                                  &a, &b, &c, &d, &e, &f, &g, &h, &i, &j, &k, &l, &m, &n, &o, &p, &q, &r, &s, &t, &u, &v, &w);

            counter++;
            internalVars[COUNTER] = counter;
            
            /* #entries = 1 + 7 + 7 + 7 + 1 */
            if(ret != 23) 
            {
                //mexPrintf("Incorrect data packet format; missing data. Iter %d\nNumbytes = %d\nGot %s\n", counter, numbytes, buf);
                mexPrintf("Incorrect data packet format; missing data. Iter %d. Numbytes = %d\n", counter, numbytes);
            }
            else
            {
                *dt = a;

                curPos[0] = b;
                curPos[1] = c;
                curPos[2] = d;
                curPos[3] = e;
                curPos[4] = f;
                curPos[5] = g;
                curPos[6] = h;

                desPos[0] = i;
                desPos[1] = j;
                desPos[2] = k;
                desPos[3] = l;
                desPos[4] = m;
                desPos[5] = n;
                desPos[6] = o;

                curVel[0] = p; 
                curVel[1] = q;
                curVel[2] = r;
                curVel[3] = s;
                curVel[4] = t;
                curVel[5] = u;
                curVel[6] = v;

                *timeStamp = w;
            }
        } else if(controlScheme == 1) { //cartesian controller
            double a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,aa,ab,ac,ad,ae,af;
            int ret = sscanf(buf, "%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf",
                                  &a, &b, &c, &d, &e, &f, &g, &h, &i, &j, &k, &l, &m, &n, &o, &p, &q, &r, &s, &t, &u, &v, &w, &x, &y, &z, &aa, &ab, &ac, &ad, &ae, &af);

            counter++;
            internalVars[COUNTER] = counter;
            
            /* #entries = 1 + 12 + 12 + 6 + 1 */
            if(ret != 32) 
            {
                //mexPrintf("Incorrect data packet format; missing data. Iter %d\nNumbytes = %d\nGot %s\n", counter, numbytes, buf);
                mexPrintf("Incorrect data packet format; missing data. Iter %d. Numbytes = %d\n", counter, numbytes);
            }
            else
            {
                *dt = a;

                curPos[0]  = b;
                curPos[1]  = c;
                curPos[2]  = d;
                curPos[3]  = e;
                curPos[4]  = f;
                curPos[5]  = g;
                curPos[6]  = h;
                curPos[7]  = i;
                curPos[8]  = j;
                curPos[9]  = k;
                curPos[10] = l;
                curPos[11] = m;

                desPos[0]  = n;
                desPos[1]  = o;
                desPos[2]  = p; 
                desPos[3]  = q;
                desPos[4]  = r;
                desPos[5]  = s;
                desPos[6]  = t;
                desPos[7]  = u;
                desPos[8]  = v;
                desPos[9]  = w;
                desPos[10] = x;
                desPos[11] = y;

                curVel[0]  = z;
                curVel[1]  = aa;
                curVel[2]  = ab;
                curVel[3]  = ac;
                curVel[4]  = ad;
                curVel[5]  = ae;

                *timeStamp = af;
            }
        }
    }
}

/* Function: mdlTerminate =====================================================
 * Abstract:
 *    In this function, you should perform any actions that are necessary
 *    at the termination of a simulation.  For example, if memory was
 *    allocated in mdlStart, this is the place to free it.
 */
static void mdlTerminate(SimStruct *S)
{
    //get sockFd and controllerScheme
    int_T *internalVars = ssGetIWork(S); /* integer typed*/    
    int sockfd        = internalVars[SOCKFD];
    
    close(sockfd);
    mexPrintf("Closing kinematic socket (sockfd = %i)\n", sockfd);
}
#ifdef  MATLAB_MEX_FILE    /* Is this file being compiled as a MEX-file? */
#include "simulink.c"      /* MEX-file interface mechanism */
#else
#include "cg_sfun.h"       /* Code generation registration function */
#endif


